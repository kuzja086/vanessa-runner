///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команд
//
// Структура модуля реализована в соответствии с рекомендациями
// oscript-app-template (C) EvilBeaver
//
///////////////////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать v8runner
#Использовать fs
#Использовать tempfiles

Перем Лог;
Перем КорневойПутьПроекта;

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
		ТекстОписания =
		"     Обновление конфигурации при разработке в ЕДТ.
		|";

	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, ТекстОписания);

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--src", 
		СтрШаблон("Путь к папке исходников
		|
		|Схема работы:
		|		Указываем путь к исходникам в формате конфиугратора (--src),
		|		Указываем путь к исходникам в формате edt (src-edt),
		|		При загрузке в каталоге исходников (--src-edt) ищется файл 
		| 		%1 (необходимо добавить в .gitignore).
		| 		Если файл найден, получается дифф изменений относительно 
		| 		последнего загруженного коммиту к HEAD.
		| 		Если файл не найден, происходит полная загрузка.
		| 		После загрузки создается\обновляется файл %1
		|		обновляем базу.", ИмяФайлаПредыдущегоГитКоммита()));

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--src-edt", "Исходники в формате EDT");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-name", "Строка подключения к хранилищу");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-user", "Пользователь хранилища");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-pwd", "Пароль");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--storageCommit", "Поместить в хранилище");

	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры // НастроитьКоманду

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   Приложение - Модуль - Модуль менеджера приложения
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач Приложение) Экспорт
	
	Лог = Приложение.Лог;
	КорневойПутьПроекта = ПараметрыСистемы.КорневойПутьПроекта;

	ДанныеПодключения = ПараметрыКоманды["ДанныеПодключения"];

	ПараметрыХранилища = Новый Структура;
	ПараметрыХранилища.Вставить("СтрокаПодключения", ПараметрыКоманды["--storage-name"]);
	ПараметрыХранилища.Вставить("Пользователь", ПараметрыКоманды["--storage-user"]);
	ПараметрыХранилища.Вставить("Пароль", ПараметрыКоманды["--storage-pwd"]);
	ПараметрыХранилища.Вставить("ПомещатьВХранилище", ПараметрыКоманды["--storageCommit"]);

	ПараметрыИсходников = Новый Структура;
	ПараметрыИсходников.Вставить("ПутьКИсходникам", ПараметрыКоманды["--src"]);
	ПараметрыИсходников.Вставить("ИсходникиВФорматеEDT", ПараметрыКоманды["--src-edt"]);
	ПараметрыИсходников.Вставить("ВерсияПлатформы", ПараметрыКоманды["--v8version"]);

	ОбновитьБазуДанных(ДанныеПодключения, ПараметрыХранилища, ПараметрыИсходников);

	// При успешном выполнении возвращает код успеха
	Возврат Приложение.РезультатыКоманд().Успех;
	
КонецФункции // ВыполнитьКоманду

Функция ИмяФайлаПредыдущегоГитКоммита()
	Возврат "lastUploadedCommit.txt";
КонецФункции

Процедура ОбновитьБазуДанных(Знач ДанныеПодключения, Знач ПараметрыХранилища, Знач ПараметрыИсходников)

	ТекущаяПроцедура = "Запускаем обновление";

	СтрокаПодключения = ДанныеПодключения.ПутьБазы;
	Пользователь = ДанныеПодключения.Пользователь;
	Пароль = ДанныеПодключения.Пароль;
	
	СтрокаПодключенияХранилище = ПараметрыХранилища.СтрокаПодключения;
	ПользовательХранилища = ПараметрыХранилища.Пользователь;
	ПарольХранилища = ПараметрыХранилища.Пароль;
	ПомещатьВХранилище = ПараметрыХранилища.ПомещатьВХранилище;

	ПутьИсходников = ПараметрыИсходников.ПутьКИсходникам;
	ПутьИсходниковEDT = ПараметрыИсходников.ИсходникиВФорматеEDT;
	ВерсияПлатформы = ПараметрыИсходников.ВерсияПлатформы;

	Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());

	Если ПустаяСтрока(СтрокаПодключения) Тогда
		КаталогБазы = ОбъединитьПути(КорневойПутьПроекта, "./build/ib");
		СтрокаПодключения = "/F""" + КаталогБазы + """";
	КонецЕсли;

	Лог.Отладка("ИнициализироватьБазуДанных СтрокаПодключения:" + СтрокаПодключения);

	Если Лев(СтрокаПодключения, 2) = "/F" Тогда
		КаталогБазы = ОбщиеМетоды.УбратьКавычкиВокругПути(Сред(СтрокаПодключения, 3, СтрДлина(СтрокаПодключения) - 2));
		ФайлБазы = Новый Файл(КаталогБазы);
		Ожидаем.Что(ФайлБазы.Существует(), ТекущаяПроцедура + " папка с базой существует").ЭтоИстина();
	КонецЕсли;

	МенеджерКонфигуратора = Новый МенеджерКонфигуратора;
	// При первичной инициализации опускаем указание пользователя и пароля, т.к. их еще нет.
	МенеджерКонфигуратора.Инициализация(
		СтрокаПодключения, "", "",
		ВерсияПлатформы);

	Конфигуратор = МенеджерКонфигуратора.УправлениеКонфигуратором();
	Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы(ВременныеФайлы.НовоеИмяФайла("log"));
	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);

	// по дифу получить соответсиве дифа файлов едт, файлам конфигуратора
	Лог.Информация("Получаем список файлов для загрузки");
	Если ПустаяСтрока(ПутьИсходников) Тогда
		ПутьИсходников = КонвертироватьИсходникиИзЕДТ(ПутьИсходниковEDT);
	КонецЕсли;

	ДанныеДляЧастичнойЗагрузки = ДанныеДляЧастичнойЗагрузки(ПутьИсходников, ПутьИсходниковEDT);

	// Если НЕ ПустаяСтрока(СтрокаПодключенияХранилище) Тогда
	// 	Лог.Информация("Захват объектов в хранилище");
	// 	МенеджерКонфигуратора.ЗахватитьОбъектыВХранилище(
	// 		СтрокаПодключенияХранилище, ПользовательХранилища, ПарольХранилища,
	// 		ДанныеДляЧастичнойЗагрузки.СписокОбъектовХранилища);	
	// КонецЕсли;

	// Лог.Информация("Запускаю загрузку конфигурации из исходников");
	
	// Если Не ПустаяСтрока(ДанныеДляЧастичнойЗагрузки.СтрокаИзмененныхФайлов) Тогда

	// 	Лог.Информация(
	// 		"Будет выполнена инкрементальная загрузка
	// 		|Измененные файлы: 
	// 		|%1", 
	// 		СтрСоединить(СтрРазделить(ДанныеДляЧастичнойЗагрузки.СтрокаИзмененныхФайлов, ";"), Символы.ПС)
	// 	);

	// КонецЕсли;

	// ПутьИсходников = Новый Файл(ОбъединитьПути(КорневойПутьПроекта, ПутьИсходников)).ПолноеИмя;

	// // МенеджерКонфигуратора.СобратьИзИсходниковТекущуюКонфигурацию(
	// // 	ПутьИсходников, ДанныеДляЧастичнойЗагрузки.СтрокаИзмененныхФайлов);
	
	// ЗаписатьХэшПоследнегоЗагруженногоКоммита(ПутьИсходников);

	ВременныеФайлы.УдалитьФайл(ДанныеДляЧастичнойЗагрузки.СписокОбъектовХранилища);
	МенеджерКонфигуратора.Деструктор();

КонецПроцедуры // ОбновитьБазуДанных

Функция КонвертироватьИсходникиИзЕДТ(ПутьИсходниковEDT)
	ПутьКонвертированыхИсходников = "";
	Возврат ПутьКонвертированыхИсходников;
КонецФункции

Функция ДанныеДляЧастичнойЗагрузки(ПутьИсходников, ПутьИсходниковEDT)
	ДанныеДляЧастичнойЗагрузки = Новый Структура();
	ДанныеДляЧастичнойЗагрузки.Вставить("СтрокаИзмененныхФайлов", "");
	ДанныеДляЧастичнойЗагрузки.Вставить("СписокОбъектовХранилища", "");

	Хэш = ПолучитьХэшПоследнегоЗагруженногоКоммита(ПутьИсходниковEDT);

	Если ПустаяСтрока(Хэш) Тогда
		ВызватьИсключение "Нет хеша последнего загруженного коммита"
	КонецЕсли;

	ТекущийКаталог = ТекущийКаталог();

	КоманднаяСтрока = СтрШаблон("git diff --name-only %1 HEAD", Хэш);

	Процесс = СоздатьПроцесс(КоманднаяСтрока, ТекущийКаталог, Истина, , КодировкаТекста.UTF8);
	Процесс.Запустить();

	Процесс.ОжидатьЗавершения();

	СтрокаИзмененныхФайлов = "";

	СписокОбъектовХранилища = Новый ЗаписьXML;
	ИмяФайлаЗахватаВХранилище = ВременныеФайлы.СоздатьФайл("xml");
	СписокОбъектовХранилища.ОткрытьФайл(ИмяФайлаЗахватаВХранилище);
	СписокОбъектовХранилища.ЗаписатьНачалоЭлемента("Objects");
	СписокОбъектовХранилища.ЗаписатьАтрибут("xmlns", "http://v8.1c.ru/8.3/config/objects");
	СписокОбъектовХранилища.ЗаписатьАтрибут("version", "1.0"); 

	ЗахваченныеОбъекты = Новый Массив();
	Пока Процесс.ПотокВывода.ЕстьДанные Цикл

		СтрокаВывода = Процесс.ПотокВывода.ПрочитатьСтроку();
		Если СтрНачинаетсяС(СтрокаВывода, СтрЗаменить(ПутьИсходниковEDT, "./", ""))
			И Не ФайлВСпискеИсключений(СтрокаВывода) Тогда

			РезультатПреобразования = ПреобразоватьИмяОбъектаEDT(ПутьИсходниковEDT, СтрокаВывода);
			Если ЗахваченныеОбъекты.Найти(РезультатПреобразования.ИмяМетаданных) = Неопределено Тогда
				ЗаписатьТег(СписокОбъектовХранилища, РезультатПреобразования.ИмяМетаданных);
				ЗахваченныеОбъекты.Добавить(РезультатПреобразования.ИмяМетаданных);
			КонецЕсли;

			ТекущаяСтрока = ОбъединитьПути(ПутьИсходников, РезультатПреобразования.ПолныйПуть);
			ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока, "/", ПолучитьРазделительПути());

			Если СтрНайти(СтрокаИзмененныхФайлов, ТекущаяСтрока) = 0 
				И Новый Файл(ТекущаяСтрока).Существует() Тогда

				СтрокаИзмененныхФайлов = СтрокаИзмененныхФайлов + ТекущаяСтрока + ";";
			Иначе
				Лог.Отладка(ТекущаяСтрока);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	СписокОбъектовХранилища.ЗаписатьКонецЭлемента();                     
	СписокОбъектовХранилища.Закрыть();

	Если ЗначениеЗаполнено(СтрокаИзмененныхФайлов) Тогда
		СтрокаИзмененныхФайлов = Лев(СтрокаИзмененныхФайлов, СтрДлина(СтрокаИзмененныхФайлов) - 1);
	КонецЕсли;

	ДанныеДляЧастичнойЗагрузки.СтрокаИзмененныхФайлов = СтрокаИзмененныхФайлов;
	ДанныеДляЧастичнойЗагрузки.СписокОбъектовХранилища = ИмяФайлаЗахватаВХранилище;

	Возврат ДанныеДляЧастичнойЗагрузки;
КонецФункции

Функция ПолучитьХэшПоследнегоЗагруженногоКоммита(Знач ПутьИсходников) 

	ИмяФайла = ФайлПредыдущегоГитКоммита(ПутьИсходников).ПолноеИмя;

	Если Не ФС.ФайлСуществует(ИмяФайла) Тогда
		Возврат "";
	КонецЕсли;

	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8NoBOM);
	Хэш = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Возврат СокрЛП(Хэш);

КонецФункции

Процедура ЗаписатьХэшПоследнегоЗагруженногоКоммита(Знач ПутьИсходников)

	ИмяФайла = ФайлПредыдущегоГитКоммита(ПутьИсходников).ПолноеИмя;

	ТекущийКаталог = ТекущийКаталог();

	КоманднаяСтрока = "git rev-parse --short HEAD";

	Процесс = СоздатьПроцесс(КоманднаяСтрока, ТекущийКаталог, Истина, , КодировкаТекста.UTF8);
	Процесс.Запустить();

	Процесс.ОжидатьЗавершения();

	Если Процесс.ПотокВывода.ЕстьДанные Тогда

		Хэш = Процесс.ПотокВывода.ПрочитатьСтроку();

		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8NoBOM);
		ЗаписьТекста.Записать(Хэш);
		ЗаписьТекста.Закрыть();

	КонецЕсли;

КонецПроцедуры

Функция СкорректироватьПутьКИзменениюФормы(СтрокаИзмененныхФайлов)
	
	Паттерн = "(.*Forms\/.*)\/Ext.*";

	РегулярноеВыражение = Новый РегулярноеВыражение(Паттерн);

	КоллекцияСовпаденийРегулярногоВыражения = РегулярноеВыражение.НайтиСовпадения(СтрокаИзмененныхФайлов);

	Если КоллекцияСовпаденийРегулярногоВыражения.Количество() = 1 
		И КоллекцияСовпаденийРегулярногоВыражения[0].Группы.Количество() = 2 Тогда

		Возврат РегулярноеВыражение.Заменить(СтрокаИзмененныхФайлов, "$1.xml");

	КонецЕсли;

	Возврат СтрокаИзмененныхФайлов;
КонецФункции

Функция ФайлВСпискеИсключений(ПутьКФайлу)

	Возврат СтрЗаканчиваетсяНа(ПутьКФайлу, "ConfigDumpInfo.xml")
		Или СтрЗаканчиваетсяНа(ПутьКФайлу, "AUTHORS")
		Или СтрЗаканчиваетсяНа(ПутьКФайлу, "VERSION")
		Или СтрЗаканчиваетсяНа(ПутьКФайлу, "DumpFilesIndex.txt");
		
КонецФункции

Функция ФайлПредыдущегоГитКоммита(Знач ПутьИсходников)
	
	Возврат Новый Файл(ОбъединитьПути(КорневойПутьПроекта, ПутьИсходников, ИмяФайлаПредыдущегоГитКоммита()));
	
КонецФункции

Функция ПреобразоватьИмяОбъектаEDT(знач ПутьИсходниковEDT, Знач СтрокаВывода)
	Результат = Новый Структура("ИмяМетаданных, ПолныйПуть");

	СоответсвиеМетаданных = СоответсвиеМетаданных();
	ВременныйПутьИсходников = СтрЗаменить(ПутьИсходниковEDT, "./", "");
	СтрокаДляРазбора = СтрЗаменить(СтрокаВывода, ВременныйПутьИсходников, "");
	РазделеннаяСтрока = СтрРазделить(СтрокаДляРазбора, "/", Ложь);

	ТипМетаданных = РазделеннаяСтрока[0];
	Если ТипМетаданных = "Configuration" Тогда
		Результат.ИмяМетаданных = ТипМетаданных;
		Результат.ПолныйПуть = "Configuration.xml";
	ИначеЕсли РазделеннаяСтрока.Найти("Forms") <> Неопределено Тогда
		Результат.ИмяМетаданных = СоответсвиеМетаданных.Получить(ТипМетаданных) + "." + РазделеннаяСтрока[1] + РазделеннаяСтрока[3];
		РазделеннаяСтрока.Удалить(РазделеннаяСтрока.Количество() - 1);
		Результат.ПолныйПуть = СтрСоединить(РазделеннаяСтрока, "/") + ".xml";
	ИначеЕсли СтрНайти(РазделеннаяСтрока[РазделеннаяСтрока.Количество() - 1], "bsl") <> 0 Тогда
		Результат.ИмяМетаданных = СоответсвиеМетаданных.Получить(ТипМетаданных) + "." + РазделеннаяСтрока[1];
		РазделеннаяСтрока.Вставить(РазделеннаяСтрока.Количество() - 1, "Ext");
		Результат.ПолныйПуть = СтрСоединить(РазделеннаяСтрока, "/");
	Иначе
		Результат.ИмяМетаданных = СоответсвиеМетаданных.Получить(ТипМетаданных) + "." + РазделеннаяСтрока[1];
		Результат.ПолныйПуть = РазделеннаяСтрока[0] + "/" + РазделеннаяСтрока[1] + ".xml";
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура ЗаписатьТег(СписокОбъектовХранилища, ИмяОбъектаДляЗахвата)
	Если ИмяОбъектаДляЗахвата = "Configuration" Тогда
		СписокОбъектовХранилища.ЗаписатьНачалоЭлемента("Configuration");
	Иначе
		СписокОбъектовХранилища.ЗаписатьНачалоЭлемента("Object");
		СписокОбъектовХранилища.ЗаписатьАтрибут("fullName", ИмяОбъектаДляЗахвата);
	КонецЕсли;
	СписокОбъектовХранилища.ЗаписатьАтрибут("includeChildObjects", "false");
	
	СписокОбъектовХранилища.ЗаписатьКонецЭлемента();
КонецПроцедуры

Функция СоответсвиеМетаданных()
	СоответсвиеМетаданных = Новый Соответствие();
	СоответсвиеМетаданных.Вставить("AccountingRegisters", "РегистрБухгалтерии");
	СоответсвиеМетаданных.Вставить("AccumulationRegisters", "РегистрНакопления");
	СоответсвиеМетаданных.Вставить("BusinessProcesses", "БизнесПроцесс");
	СоответсвиеМетаданных.Вставить("CalculationRegisters", "РегистрРасчета");
	СоответсвиеМетаданных.Вставить("Catalogs", "Справочник");
	СоответсвиеМетаданных.Вставить("ChartsOfAccounts", "ПланСчетов");
	СоответсвиеМетаданных.Вставить("ChartsOfCalculationTypes", "ПланВидовРасчета");
	СоответсвиеМетаданных.Вставить("ChartsOfCharacteristicTypes", "ПланВидовХарактеристик");
	СоответсвиеМетаданных.Вставить("CommandGroups", "ГруппаКоманд");
	СоответсвиеМетаданных.Вставить("CommonCommands", "ОбщаяКоманда");
	СоответсвиеМетаданных.Вставить("CommonAttributes", "ОбщийРеквизит");
	СоответсвиеМетаданных.Вставить("CommonPictures", "ОбщаяКартинка");
	СоответсвиеМетаданных.Вставить("CommonTemplates", "ОбщийМакет");
	СоответсвиеМетаданных.Вставить("CommonForms", "ОбщаяФорма");
	СоответсвиеМетаданных.Вставить("CommonModules", "ОбщийМодуль");
	СоответсвиеМетаданных.Вставить("Configuration", "Конфигурация");
	СоответсвиеМетаданных.Вставить("Constants", "Константа");
	СоответсвиеМетаданных.Вставить("DataProcessors", "Обработка");
	СоответсвиеМетаданных.Вставить("DefinedTypes", "ОпределяемыйТип");
	СоответсвиеМетаданных.Вставить("DocumentJournals", "ЖурналДокумента");
	СоответсвиеМетаданных.Вставить("Documents", "Документ");
	СоответсвиеМетаданных.Вставить("Enums", "Переисление");
	СоответсвиеМетаданных.Вставить("EventSubscriptions", "ПодпискаНаСобытие");
	СоответсвиеМетаданных.Вставить("ExchangePlans", "ПланОбмена");
	СоответсвиеМетаданных.Вставить("FilterCriteria", "КритерийОтбора");
	СоответсвиеМетаданных.Вставить("FunctionalOptions", "ФункциональнаяОпция");
	СоответсвиеМетаданных.Вставить("FunctionalOptionsParameters", "ПараметрФункциональныхОпций");
	СоответсвиеМетаданных.Вставить("HTTPServices", "HTTPСервис");
	СоответсвиеМетаданных.Вставить("InformationRegisters", "HTTPСервис");
	СоответсвиеМетаданных.Вставить("Reports", "Отчет");
	СоответсвиеМетаданных.Вставить("Roles", "Роль");
	СоответсвиеМетаданных.Вставить("ScheduledJobs", "РегламентноеЗадание");
	СоответсвиеМетаданных.Вставить("SessionParameters", "ПараметрСеанса");
	СоответсвиеМетаданных.Вставить("SettingsStorages", "ХранилищеНастроек");
	СоответсвиеМетаданных.Вставить("StyleItems", "Стиль");
	СоответсвиеМетаданных.Вставить("Subsystems", "Подсистема");
	СоответсвиеМетаданных.Вставить("Tasks", "Задача");
	СоответсвиеМетаданных.Вставить("WebServices", "WebСервис");
	СоответсвиеМетаданных.Вставить("WSReferences", "WSСсылка");
	СоответсвиеМетаданных.Вставить("XDTOPackages", "XDTOПакет");
	
	Возврат СоответсвиеМетаданных;
КонецФункции